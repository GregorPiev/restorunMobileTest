/* create an arrow that points up */
.arrow_up {
  width: 0; 
  height: 0; 
  border-left: 5px solid transparent;  /* left arrow slant */
  border-right: 5px solid transparent; /* right arrow slant */
  border-bottom: 5px solid #2f2f2f; /* bottom, add background color here */
  font-size: 0;
  line-height: 0;
}

/* create an arrow that points down */
.arrow_down {
  width: 0; 
  height: 0; 
  border-left: 5px solid transparent;
  border-right: 5px solid transparent;
  border-top: 5px solid #2f2f2f;
  font-size: 0;
  line-height: 0;
}

/* create an arrow that points left */
.arrow_left {
  width: 0; 
  height: 0; 
  border-bottom: 5px solid transparent;  /* left arrow slant */
  border-top: 5px solid transparent; /* right arrow slant */
  border-right: 5px solid #2f2f2f; /* bottom, add background color here */
  font-size: 0;
  line-height: 0;
}

/* create an arrow that points right */
.arrow_right {
  width: 0; 
  height: 0; 
  border-bottom: 5px solid transparent;  /* left arrow slant */
  border-top: 5px solid transparent; /* right arrow slant */
  border-left: 5px solid #2f2f2f; /* bottom, add background color here */
  font-size: 0;
  line-height: 0;
}
@mixin triangle($size, $color, $direction) {
    height: 0;
    width: 0;
    border-color: transparent;
    border-style: solid;
    border-width: $size / 2;

    @if $direction == up {
      border-bottom-color: $color;
    } @else if $direction == right {
      border-left-color:   $color;

    } @else if $direction == down {
      border-top-color:    $color;

    } @else if $direction == left {
      border-right-color:  $color;
    }
}


@mixin bordered-triangle($size, $border-width, $color, $border-color, $direction, $alt: false) { 
  $back-size: $size + ($border-width * 2);
  position: absolute;
  
  min-width: $size;
  min-height: $size;
  
  &:after,
  &:before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
  }
  
  &:after {
     @include triangle($size, $color, $direction);
  }
  
  &:before {
    @include triangle($back-size, $border-color, $direction);
    $mid-border-width: ($border-width / 2);
    $border-width-and-mid: $border-width + $mid-border-width; 
    
    @if ($alt == true) {
      $mid-border-width: 0;
      $border-width-and-mid: $border-width * 2;
    }
    
    @if ($direction == up) or ($direction == down) {
      margin-left: - $border-width;
      
      @if ($direction == down) {
        margin-top: -$mid-border-width;
      } @else {
        margin-top: - $border-width-and-mid;
      }  
    
    } @else if ($direction == right) or ($direction == left) {
      margin-top: - $border-width;
      
      @if ($direction == right) {
        margin-left: - $mid-border-width;
      } @else {
        margin-left: - $border-width-and-mid;
      }
    }
  }
  
}



// // Usage
// span.bordered-triangle-top {
//   @include bordered-triangle(30px, 2px, #CCC, #666, up);
// }

// span.bordered-triangle-right {
//   @include bordered-triangle(30px, 2px, #CCC, #666, right);
// }

// span.bordered-triangle-bottom {
//   @include bordered-triangle(30px, 2px, #CCC, #666, down);
// }

// span.bordered-triangle-left {
//   @include bordered-triangle(30px, 2px, #CCC, #666, left);
// }



// strong.bordered-triangle-top {
//   @include bordered-triangle(30px, 2px, #CCC, #666, up, true);
// }

// strong.bordered-triangle-right {
//   @include bordered-triangle(30px, 2px, #CCC, #666, right, true);
// }

// strong.bordered-triangle-bottom {
//   @include bordered-triangle(30px, 2px, #CCC, #666, down, true);
// }

// strong.bordered-triangle-left {
//   @include bordered-triangle(30px, 2px, #CCC, #666, left, true);
// }


// Link
// http://codepen.io/vieron/pen/xuHDA